import { QueryInterface, DataTypes } from 'sequelize';

export const up = async (queryInterface: QueryInterface): Promise<void> => {
  console.log('üîÑ Eliminando todos los √≠ndices √∫nicos del campo nombre en cargos...');
  
  // Lista de √≠ndices √∫nicos que pueden existir en el campo nombre
  const uniqueIndexes = [
    'nombre',
    'cargos_nombre',
    'cargos_nombre_unique'
  ];
  
  for (const indexName of uniqueIndexes) {
    try {
      await queryInterface.removeIndex('cargos', indexName);
      console.log(`‚úÖ √çndice √∫nico ${indexName} eliminado`);
    } catch (error) {
      console.log(`‚ÑπÔ∏è √çndice ${indexName} no encontrado, continuando...`);
    }
  }
  
  // Tambi√©n intentar eliminar cualquier restricci√≥n √∫nica en el campo nombre
  const uniqueConstraints = [
    'cargos_nombre_key',
    'nombre_key',
    'cargos_nombre_unique_key'
  ];
  
  for (const constraintName of uniqueConstraints) {
    try {
      await queryInterface.removeConstraint('cargos', constraintName);
      console.log(`‚úÖ Restricci√≥n √∫nica ${constraintName} eliminada`);
    } catch (error) {
      console.log(`‚ÑπÔ∏è Restricci√≥n ${constraintName} no encontrada, continuando...`);
    }
  }
  
  console.log('‚úÖ Proceso de eliminaci√≥n de restricciones √∫nicas completado');
};

export const down = async (queryInterface: QueryInterface): Promise<void> => {
  // Restaurar el √≠ndice √∫nico del campo nombre
  await queryInterface.addIndex('cargos', {
    fields: ['nombre'],
    unique: true,
    name: 'cargos_nombre_unique'
  });
  console.log('‚úÖ √çndice √∫nico cargos_nombre_unique restaurado');
};
